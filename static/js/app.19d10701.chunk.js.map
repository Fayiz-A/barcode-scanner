{"version":3,"sources":["components/AppBar.tsx","routes/ScanRoute.tsx","components/CustomButton.tsx","App.tsx","web-build/register-service-worker.js","barcodeScanner.jpg"],"names":["AppBar","props","View","style","styles","container","Text","textStyle","this","title","React","StyleSheet","create","fontSize","fontWeight","color","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","alignItems","justifyContent","backgroundColor","ScanButtonState","CustomButton","buttonSurrounding","TouchableOpacity","button","onPress","Component","borderRadius","marginTop","marginLeft","ScanRoute","state","askPermissionsAndStartScanning","a","async","Platform","OS","alert","BarCodeScanner","requestPermissionsAsync","permission","console","log","JSON","stringify","setState","scanButtonState","clicked","cameraPermissionGranted","granted","scanned","renderResultScreen","scanButtonWidth","Dimensions","get","barcodeImageContainer","Image","source","require","barcodeImage","scanResult","scanResultcText","scannedText","length","renderBarcodeScanner","onBarCodeScanned","handleBarCodeScanned","type","data","normal","barcodeImageWidth","barcodeImageHeight","paddingTop","paddingLeft","resizeMode","App","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","module","exports"],"mappings":"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","file":"static/js/app.19d10701.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport interface Props {\n  title: String,\n}\n\nclass AppBar extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.textStyle}>{this.props.title}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  textStyle: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: \"white\"\n  },\n  container: {\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.5,\n    shadowRadius: 2,\n    elevation: 2,    \n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: 60,\n    backgroundColor: \"black\"\n  },\n});\n\nexport default AppBar;","import React, { Component } from \"react\";\nimport { View, StyleSheet, Image, Text, Button, Dimensions, Platform } from \"react-native\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\n\nimport AppBar from \"../components/AppBar\";\nimport CustomButton from \"../components/CustomButton\";\n\nenum ScanButtonState { \"clicked\", \"normal\" }\n\nexport interface Props { }\n\nexport interface State {\n   scanButtonState: ScanButtonState,\n   cameraPermissionGranted: boolean,\n   scanned: boolean,\n   scannedText: string\n}\n\nexport default class ScanRoute extends React.Component<Props, State> {\n\n   constructor(props: Props, state: State) {\n      super(props, state);\n\n      this.state = {\n         scanButtonState: ScanButtonState.normal,\n         cameraPermissionGranted: false,\n         scanned: false,\n         scannedText: \"\"\n      }\n   }\n\n   askPermissionsAndStartScanning = async () => {\n      if(Platform.OS == \"web\") {\n         alert(\"The scanner doesn't work on web\")\n      } else {\n         let permission: any = await BarCodeScanner.requestPermissionsAsync();\n         console.log(`Permission: ${JSON.stringify(permission)}`);\n   \n         this.setState({\n            scanButtonState: ScanButtonState.clicked,\n            cameraPermissionGranted: permission.granted,\n            scanned: false\n         });\n      }\n   }\n\n   renderResultScreen = (): JSX.Element => {\n      let scanButtonWidth: number = Dimensions.get(\"window\").width / 5;\n\n      return (\n         <View>\n            <AppBar title=\"Barcode Scanner\" />\n            <View style={styles.barcodeImageContainer}>\n               <Image\n                  source={require(\"../barcodeScanner.jpg\")}\n                  style={styles.barcodeImage}\n               />\n            </View>\n            <CustomButton\n               title=\"Scan\"\n               onPress={() => this.askPermissionsAndStartScanning}\n               color=\"red\"\n               width={scanButtonWidth}\n               marginTop={20}\n               marginLeft={(Dimensions.get(\"window\").width / 2) - (scanButtonWidth / 2)}\n            />\n            <View style={styles.scanResult}>\n               <Text style={styles.scanResultcText}>{this.state.scannedText.length == 0 ? ``:`Scan result: ${this.state.scannedText}`}</Text>\n            </View>\n         </View>\n      );\n   }\n\n   renderBarcodeScanner = () => {\n      console.log(`In render barcode scanner with state: ${this.state.scanned}`);\n      if (this.state.cameraPermissionGranted) {\n         console.log(`Camera permission granted: ${this.state.cameraPermissionGranted}`)\n         return (\n            <View>\n               <BarCodeScanner \n                  style={{width: Dimensions.get('window').width, height: Dimensions.get('window').height}}\n                  onBarCodeScanned={this.state.scanned ? () => console.log(`Case: barcode shouldn't be scanned`):this.handleBarCodeScanned}\n               />\n            </View>\n         )\n      } else {\n         return (\n            <View>\n               <Text>No camera permission</Text>\n            </View>\n         )\n      }\n   }\n\n   handleBarCodeScanned = ({ type, data }: { type: any, data: any }) => {\n      console.log(`In handle barcode scan`);\n      alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n      this.setState({\n         scanned: true,\n         scanButtonState: ScanButtonState.normal,\n         scannedText: data\n      })\n   }\n\n   render() {\n\n      return (\n         <View>\n            {this.state.scanButtonState == ScanButtonState.normal ? this.renderResultScreen() : this.renderBarcodeScanner()}\n         </View>\n      );\n   }\n}\n\nlet barcodeImageWidth: number = Dimensions.get(\"window\").width / 6;\nlet barcodeImageHeight: number = Dimensions.get(\"window\").height / 4;\n\nconst styles = StyleSheet.create({\n   barcodeImageContainer: {\n      paddingTop: Dimensions.get(\"window\").height/10,\n      paddingLeft: Dimensions.get(\"window\").width / 2 - (barcodeImageWidth / 1.35)\n   },\n   barcodeImage: {\n      width: barcodeImageWidth,\n      height: barcodeImageHeight,\n      resizeMode: 'stretch'\n   },\n   scanResult: {\n      paddingTop: 20,\n      paddingLeft: 20,\n   },\n   scanResultcText: {\n      fontSize: 20\n   }\n})","//importing the libraries\nimport React, { Component } from 'react';\nimport { Text, View, TouchableOpacity, StyleSheet, ColorValue } from 'react-native';\n\nexport interface Props {\n   onPress: () => any,\n   title: String,\n   color: ColorValue,\n   width: number,\n   marginTop: number,\n   marginLeft: number\n}\n\nexport default class CustomButton extends Component<Props> {\n\n   constructor(props: Props) {\n      super(props);\n\n   }\n\n  render() {\n    return (\n      <View style={styles(this.props).buttonSurrounding}>\n        <TouchableOpacity\n          style={styles(this.props).button}\n          onPress={this.props.onPress()}>\n          <Text style={styles(this.props).textStyle}>{this.props.title}</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n\nconst styles = (props: Props) =>\n  StyleSheet.create({\n    button: {\n      backgroundColor: props.color,\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: props.width,\n      height: 55,\n      borderRadius: 28\n    },\n    buttonSurrounding: {\n      marginTop: props.marginTop,\n      marginLeft: props.marginLeft,\n    },\n    textStyle: {\n      fontSize: 20,\n      color: 'white',\n      // fontFamily: 'cursive',\n      fontWeight: 'bold',\n    },\n  });","import React from 'react';\nimport ScanRoute from './routes/ScanRoute';\n\nexport default class App extends React.Component {\n  \n  render() {\n    return (\n      <ScanRoute />\n    );\n  }\n}","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/barcode-scanner/expo-service-worker.js', { scope: '/barcode-scanner/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/barcodeScanner.871c3c0d.jpg\";"],"sourceRoot":""}